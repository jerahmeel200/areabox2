#!/usr/bin/env python

"""
This hook runs after prepare-commit-msg

There is some rules that you can follow to build your commit:

- The basic:
    <ID Number> - <Type><(Optional topic)>: <Details about this commit>
    123542 - feat(user): add 'change name' option

- Without reference, used for no related work items:
    !<Type><(Optional topic)>: <Details about this commit>
    !fix: set missing 'https' protocol

- Default Git Message, those one generated by git when you merge, rever, cherry-pick, etc:
    Merge branch<any other text>
    Revert<any other text>
"""

DEBUG = False

import sys, re
from subprocess import check_output

SPLITTER = "\n*********************************************************\n"

ID = r"(([#0-9,]+\s-\s)|!)"
ID_ERROR = """Use a correct identificaction to the work item e.g.:
'123456 - '
'5412,5413 - '
'#7846,4587 - '"""

TYPE = r"(feat|fix|refactor|perf|style|test|docs|build|ops|ci|chore)(?:\([\w\s]+\))*:"
TYPE_ERROR = """Set a proper type label, use this list:
- feat: add features.
- fix: make fixes.
- refactor: rewrite/restructure code (doesn't affect behaviour).
- perf: change performance.
- style: change just style.
- test: add/fix testing code.
- docs: affect documentation.
- build: change build tool, ci pipeline, dependencies, project version.
- ops: affect infrastructure, deployment, backup, recovery.
- ci: changes to our CI configuration files and scripts.
- chore: other changes that don't modify source code or test files.

optional: you can add an optional scope explanation using '(<scope>)'.

e.g.:
1234 - feat(transport module): add 'change' button
524126 - fix: rename label
245156,245157 - fix(sales module): revert initial changes
#541236 - perf: remake class using generic search class"""

SUBJECT = r"\s[\w .,\+\-!<>/@#$%^&*(){}\\\"\\\'\[\]]"
SUBJECT_ERROR = """Write a proper subject message, (With an space at the beggining) e.g.:
': add new payment system'
': remove table'
': change search criteria'
': add missing translation'
': update global colors'
': add new term 'custom' to resources'
': replace $ by ! on login.'"""

SUBJECT_SIZE = r"{3,}"
SUBJECT_SIZE_ERROR = "The subject needs at least 3 characters."

regex_fragments = [
    (r"^{}".format(ID), SPLITTER+ID_ERROR+SPLITTER),
    (TYPE, SPLITTER+TYPE_ERROR+SPLITTER),
    (SUBJECT, SPLITTER+SUBJECT_ERROR+SPLITTER),
    (r"{}$".format(SUBJECT_SIZE), SPLITTER+SUBJECT_SIZE_ERROR+SPLITTER),
    ]

# Auto generates commit messages by Git
DEFAULT_MERGE_COMMIT = r"Merge[\w\s\S]+"
DEFAULT_REVERT_COMMIT = r"Revert[\w\s\S]+"
DEFAULT_CHERRY_PICK_COMMIT = r"Cherry-pick[\w\s\S]+"
DEFAULT_BISECT_COMMIT = r"Bisecting[\w\s\S]+"
DEFAULT_FIXUP_COMMIT = r"Fixup[\w\s\S]+"
DEFAULT_SAQUASH_COMMIT = r"Squash[\w\s\S]+"

REGEX = r"^(({})|({})|({})|({})|({})|({})|({}))$".format(DEFAULT_MERGE_COMMIT,DEFAULT_REVERT_COMMIT,DEFAULT_CHERRY_PICK_COMMIT,DEFAULT_BISECT_COMMIT,DEFAULT_FIXUP_COMMIT,DEFAULT_SAQUASH_COMMIT,ID+TYPE+SUBJECT+SUBJECT_SIZE)

# On exception message
ERROR_BAD_MATCH = "Commit doesn't match pattern...."

def raise_error(message):
    print(message)
    raise Exception(message)

def check_syntax(commit):
    fragments = ""
    for i in range(len(regex_fragments)):
        fragments+=regex_fragments[i][0]
        match = re.search(fragments, commit)
        if DEBUG:
            print("Fragment {}: {}".format(str(i+1), fragments))
        if match == None:
            return regex_fragments[i][1]

def check_commit():
    commit_msg_filepath = sys.argv[1]
    with open(commit_msg_filepath, "r+") as f:
        commit = f.read()
        commit = commit.replace("\n","") + " "
        if DEBUG:
            print("Commit: ({})".format(commit))
        match = re.search(REGEX, commit)
        if match == None:
            raise_error("{}\n{}".format(ERROR_BAD_MATCH,check_syntax(commit)))

check_commit()

# For testing/development
if DEBUG:
    raise_error("CORRECT")
